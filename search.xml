<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何利用Frp在没有公网的机器上运行Jmeter Server作为slave</title>
      <link href="2022/06/13/howtousefrprunjmeterserver/"/>
      <url>2022/06/13/howtousefrprunjmeterserver/</url>
      
        <content type="html"><![CDATA[<p>在做测试的作业时，突然想到bin目录下有个jmeter-server，看到server我就猜想是否能组成分布式，经过一番查找，发现是可行的，正好手上有一些白嫖的内网服务器，于是想利用自己部署好的Frp来给这些白嫖的服务器焕发第二春，但是教程都是利用内网机器做成分布式，显然是不适用于当前情况的。于是，在看过rmi的原理和经过一番摸索后，终于实现了自己的想法。</p><h2 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h2><h3 id="jmeter配置"><a href="#jmeter配置" class="headerlink" title="jmeter配置"></a>jmeter配置</h3><p>修改<code>bin/jmeter.properties</code>  </p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token constant">remote_hosts</span><span class="token attr-value"><span class="token punctuation">=</span>127.0.0.1</span><span class="token comment">#重点在于修改这两项配置，端口自定义为自己想要的端口，但是两个端口需一致</span><span class="token constant">server_port</span><span class="token attr-value"><span class="token punctuation">=</span>6789 </span><span class="token constant">server.rmi.localport</span><span class="token attr-value"><span class="token punctuation">=</span>6789 </span>```  启动命令  ```bashjmeter-server -Djava.rmi.server.hostname<span class="token attr-value"><span class="token punctuation">=</span>0.0.0.0 #将0.0.0.0修改为frps端的ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="frpc配置"><a href="#frpc配置" class="headerlink" title="frpc配置"></a>frpc配置</h3><p>frps配置就不多介绍了，可以自行查看文档，重点在于frpc如何配置。<br>因为rmi是基于<code>tcp/ip</code>协议的，所以应该应该这样配置:</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[jmeter]</span><span class="token constant">type</span> <span class="token attr-value"><span class="token punctuation">=</span> tcp</span><span class="token constant">local_ip</span> <span class="token attr-value"><span class="token punctuation">=</span> 127.0.0.1</span><span class="token constant">local_port</span> <span class="token attr-value"><span class="token punctuation">=</span> 6789 #修改成自己想要的端口 </span><span class="token constant">remote_port</span> <span class="token attr-value"><span class="token punctuation">=</span> 6789 #修改成自己想要的端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h2><h3 id="修改jmeter配置"><a href="#修改jmeter配置" class="headerlink" title="修改jmeter配置"></a>修改jmeter配置</h3><p>修改<code>bin/jmeter.properties</code>  </p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[jmeter]</span><span class="token comment">#将0.0.0.0修改为frps端端ip，端口为Slave配置的端口</span><span class="token constant">remote_hosts</span><span class="token attr-value"><span class="token punctuation">=</span>0.0.0.0:6789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Jmeter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jmeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础题集合</title>
      <link href="2022/05/10/javascriptbasicquestions/"/>
      <url>2022/05/10/javascriptbasicquestions/</url>
      
        <content type="html"><![CDATA[<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">MDN原型链介绍</a>  </p><blockquote><p> 每个实例对象（<code>object</code>）都有一个私有属性（称之为 <code>__proto__</code> ）指向它的构造函数的原型对象（<code>prototype</code>）。该原型对象也有一个自己的原型对象（<code>__proto__</code>），层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个原型链中的最后一个环节。 </p></blockquote><p><img src="https://camo.githubusercontent.com/9a69b0f03116884e80cf566f8542cf014a4dd043fce6ce030d615040461f4e5a/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f6d717971696e6766656e672f426c6f672f496d616765732f70726f746f74797065352e706e67" alt="关系图 ">  </p><h3 id="手写bind"><a href="#手写bind" class="headerlink" title="手写bind"></a>手写bind</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将参数拆解为数组</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment">// 变成数组</span>        <span class="token comment">// 获取 this（数组第一项）</span>    <span class="token keyword">const</span> t <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// fn1.bind(...) 中的 fn1</span>    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment">// 返回一个函数</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'this is fn1'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> fn2 <span class="token operator">=</span> fn1<span class="token punctuation">.</span><span class="token function">bind1</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手写new"><a href="#手写new" class="headerlink" title="手写new"></a>手写new</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">funcNew</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">obj</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> result <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> result <span class="token operator">:</span> newObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手写instanceof"><a href="#手写instanceof" class="headerlink" title="手写instanceof"></a>手写instanceof</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">newInstanceOf</span> <span class="token punctuation">(</span><span class="token parameter">leftValue<span class="token punctuation">,</span> rightValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> leftValue <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> rightValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> rightProto <span class="token operator">=</span> rightValue<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>    leftValue <span class="token operator">=</span> leftValue<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> rightProto<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        leftValue <span class="token operator">=</span> leftValue<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * --- 验证 --- */</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">Child</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newInstanceOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> Array<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newInstanceOf</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> Object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newInstanceOf</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> Array<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newInstanceOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> Object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newInstanceOf</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> Foo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newInstanceOf</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> Child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newInstanceOf</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> Father<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">newInstanceOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> Object<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测验题"><a href="#测验题" class="headerlink" title="测验题"></a>测验题</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"animal"</span><span class="token punctuation">&#125;</span>   <span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">&#125;</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">var</span> PavlovPet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PavlovPet<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables">MDN变量</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Hoisting">MDN变量提升</a>  </p><h3 id="每隔一秒输出一个数字"><a href="#每隔一秒输出一个数字" class="headerlink" title="每隔一秒输出一个数字"></a>每隔一秒输出一个数字</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 闭包</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> j<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测验题-1"><a href="#测验题-1" class="headerlink" title="测验题"></a>测验题</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token function">output</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">// 1 undefined 2 1</span><span class="token comment">// 第一个输出：全局的 var a</span><span class="token comment">// 第二个输出：output 函数中声明的 var a变量提升，还未赋值</span><span class="token comment">// 第三个输出：output 函数局部作用域的 a 已赋值</span><span class="token comment">// 第四输出：全局的 var a 没有变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">0</span>    a<span class="token operator">++</span>    <span class="token keyword">return</span> a<span class="token punctuation">&#125;</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token comment">// undefined number</span><span class="token comment">// let a 是一个局部变量。typeof a 检查的是未声明的变量。</span><span class="token comment">// b 是个全局变量，它在 foo 函数中被赋值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures">MDN数据类型</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"ConardLi"</span><span class="token punctuation">)</span><span class="token comment">// 1 false</span><span class="token comment">// + 运算符首先会尝试将 boolean 类型转换为数字类型，true 被转换为 1，false 被转换为 0。</span><span class="token comment">// 字符串 'ConardLi' 是一个真值，所以 !'ConardLi' 为 false。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous">MDN异步</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop">MDN事件循环</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">log</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>log<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 0 1 2</span><span class="token comment">//定时器是异步执行，浏览器会优先执行同步任务，在遇到定时器时会先把它们暂存在一个宏任务队列中，待当前宏任务队列的所有任务执行完毕后才会去执行队列中的任务，此时循环已执行完毕，i 已经是 3。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 (Array)"></a>数组 (Array)</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Arrays">MDN数组</a>  </p><h3 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 递归</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 拓展运算符(es6)</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测验题-2"><a href="#测验题-2" class="headerlink" title="测验题"></a>测验题</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> clothes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'shirt'</span><span class="token punctuation">,</span> <span class="token string">'socks'</span><span class="token punctuation">,</span> <span class="token string">'jacket'</span><span class="token punctuation">,</span> <span class="token string">'pants'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">]</span>clothes<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clothes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// undefined</span><span class="token comment">// 将数组的长度赋值为 0 就相当于从数组中删除所有元素。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [14, 22, 5, 9]</span><span class="token comment">// sort() 方法用于对数组的元素进行排序,并返回数组。默认排序顺序是根据字符串Unicode码点。</span><span class="token comment">// 详情请见V8引擎Array源码710行处 https://github.com/v8/v8/blob/ad82a40509c5b5b4680d4299c8f08d6c6d31af3c/src/js/array.js</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象(Object)"></a>对象(Object)</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects">MDN对象</a>  </p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// obj 是 null 或者不是对象和数组，直接返回</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> res<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断自身中是否包含自身属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 验证</span>o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token punctuation">&#123;</span>c<span class="token operator">:</span> <span class="token string">'4'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>res <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res <span class="token operator">==</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Batman'</span><span class="token punctuation">,</span>  city<span class="token operator">:</span> <span class="token string">'Gotham'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// **********************方法一**********************</span><span class="token keyword">const</span> heroEnhancedClone <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token operator">...</span>hero<span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">'Batman Clone'</span><span class="token punctuation">,</span>  realName<span class="token operator">:</span> <span class="token string">'Bruce Wayne'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 验证</span>heroEnhancedClone<span class="token punctuation">;</span>  <span class="token comment">// &#123; name: 'Batman Clone', city: 'Gotham', realName: 'Bruce Wayne' &#125;</span><span class="token comment">// **********************方法二**********************</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>heroClone <span class="token punctuation">&#125;</span> <span class="token operator">=</span> hero<span class="token punctuation">;</span><span class="token comment">// 验证</span>heroClone<span class="token punctuation">;</span> <span class="token comment">// &#123; name: 'Batman', city: 'Gotham' &#125;</span>hero <span class="token operator">===</span> heroClone<span class="token punctuation">;</span> <span class="token comment">// => false</span><span class="token comment">// **********************方法三**********************</span><span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'Batman'</span><span class="token punctuation">,</span>  city<span class="token operator">:</span> <span class="token string">'Gotham'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 验证</span><span class="token keyword">const</span> heroClone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> hero<span class="token punctuation">)</span><span class="token punctuation">;</span>heroClone<span class="token punctuation">;</span> <span class="token comment">// &#123; name: 'Batman', city: 'Gotham' &#125;</span>hero <span class="token operator">===</span> heroClone<span class="token punctuation">;</span> <span class="token comment">// => false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测验题-3"><a href="#测验题-3" class="headerlink" title="测验题"></a>测验题</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"b"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span> key<span class="token operator">:</span> <span class="token string">"c"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 456</span><span class="token comment">// 对象不能做对象的 key，实际上是:</span><span class="token comment">// a["Object object"] = 123;</span><span class="token comment">// a["Object object"] = 456;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="应用问题"><a href="#应用问题" class="headerlink" title="应用问题"></a>应用问题</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token keyword">let</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> remainWaitTime <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>remainWaitTime <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      lastTime <span class="token operator">=</span> nowTime<span class="token punctuation">;</span>      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lastTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> remainWaitTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现ajax的post"><a href="#实现ajax的post" class="headerlink" title="实现ajax的post"></a>实现ajax的post</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax_post</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 异步对象 ajax</span>    <span class="token keyword">var</span> ajax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. url 方法</span>    ajax<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. 设置请求报文</span>    ajax<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4. 发送</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        ajax<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 5. 注册事件</span>    ajax<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> ajax<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ajax<span class="token punctuation">.</span>respenseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite+Vue3+TSX 实践</title>
      <link href="2022/05/09/vitewithtsx/"/>
      <url>2022/05/09/vitewithtsx/</url>
      
        <content type="html"><![CDATA[<p>在开发时，碰到一个需求：利用Element Plus的MessageBox组件实现一个弹框选择器，即MessageBox+Select组件搭配使用，要将Select放在MessageBox的message配置项里，但message接受的类型为<code>string | VNode</code>，所以要搭配Vue的render函数<code>h()</code>来实现。<br>思路就是将Select组件封装好后，用<code>h()</code>转换为<code>VNode</code>，一开始本打算直接在message配置项中写好<code>h()</code>，但是实际实现的时候比较麻烦，最后决定将Select用TSX封装后用<code>h()</code>转换为VNode最方便。  </p><h2 id="tsx支持"><a href="#tsx支持" class="headerlink" title="tsx支持"></a>tsx支持</h2><p>首先需要安装官方维护的vite插件<code>@vitejs/plugin-vue-jsx</code>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> @vitejs/plugin-vue-jsx -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装好后在<code>vite.config.ts</code>配置，代码如下  </p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> vueJsx <span class="token keyword">from</span> <span class="token string">"@vitejs/plugin-vue-jsx"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">vueJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="封装Select组件"><a href="#封装Select组件" class="headerlink" title="封装Select组件"></a>封装Select组件</h2><p>我想封装一个可刷新Option的组件，结构为Select + button &gt; Option，并且需要父子组件间通信，即需要有<code>props</code>和<code>emit</code>。代码如下:  </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--child.vue--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tsx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Refresh <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@element-plus/icons-vue'</span><span class="token keyword">import</span> axios<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> AxiosRequestConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineComponent<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> onMounted <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//显式声明 prop</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> props<span class="token punctuation">.</span>id        <span class="token keyword">interface</span> <span class="token class-name">optionsProps</span> <span class="token punctuation">&#123;</span>            label<span class="token operator">:</span> string            value<span class="token operator">:</span> string        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> options <span class="token operator">=</span> reactive<span class="token operator">&lt;</span>optionsProps<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">//刷新数据的函数</span>        <span class="token keyword">const</span> <span class="token function-variable function">getOptionsList</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            options<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token keyword">const</span> config<span class="token operator">:</span> AxiosRequestConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                method<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>                url<span class="token operator">:</span> <span class="token string">'/example'</span><span class="token punctuation">,</span>                headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">axios</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>            <span class="token keyword">let</span> res <span class="token operator">=</span> data<span class="token punctuation">.</span>data            res<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!==</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    options<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                        label<span class="token operator">:</span> item<span class="token punctuation">,</span>                        value<span class="token operator">:</span> item                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> selectValue <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token comment">//组件发出的自定义事件，将Select选中的数据传递给父组件</span>        <span class="token keyword">const</span> <span class="token function-variable function">selectChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"getSelect"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">getOptionsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>                <span class="token comment">//Vue中的tsx规范</span>                <span class="token operator">&lt;</span>el<span class="token operator">-</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token punctuation">&#123;</span>selectValue<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span> onChange<span class="token operator">=</span><span class="token punctuation">&#123;</span>selectChange<span class="token punctuation">&#125;</span><span class="token operator">></span>                    <span class="token comment">// v-for</span>                    <span class="token punctuation">&#123;</span>                        options<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">return</span> <span class="token operator">&lt;</span>el<span class="token operator">-</span>option                                key<span class="token operator">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span>                                label<span class="token operator">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>label<span class="token punctuation">&#125;</span>                                value<span class="token operator">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span>                            <span class="token operator">/</span><span class="token operator">></span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>select<span class="token operator">></span>                <span class="token operator">&lt;</span>el<span class="token operator">-</span>button icon<span class="token operator">=</span><span class="token punctuation">&#123;</span>Refresh<span class="token punctuation">&#125;</span> size<span class="token operator">=</span><span class="token string">"large"</span> onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>getOptionsList<span class="token punctuation">&#125;</span> circle <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"btn"</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.btn</span> <span class="token punctuation">&#123;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在MessageBox使用封装好的组件"><a href="#在MessageBox使用封装好的组件" class="headerlink" title="在MessageBox使用封装好的组件"></a>在MessageBox使用封装好的组件</h2><p>代码如下</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--parent.vue--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ElMessageBox <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'@/components/child.vue'</span><span class="token keyword">const</span> selectValue <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token function">ElMessageBox</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  message<span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    id<span class="token punctuation">,</span><span class="token comment">//传递给child的prop</span>    <span class="token function-variable function">onGetSelect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      selectValue<span class="token punctuation">.</span>value <span class="token operator">=</span> val    <span class="token punctuation">&#125;</span><span class="token comment">//emit</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  confirmButtonText<span class="token operator">:</span> <span class="token string">'发送请求'</span><span class="token punctuation">,</span>  <span class="token function-variable function">beforeClose</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">_action<span class="token punctuation">,</span> _instance<span class="token punctuation">,</span> _done</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//code</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> TypeScript </tag>
            
            <tag> JSX/TSX </tag>
            
            <tag> Vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的值传递和引用传递</title>
      <link href="2021/10/28/explainvaluereferenceinjs/"/>
      <url>2021/10/28/explainvaluereferenceinjs/</url>
      
        <content type="html"><![CDATA[<p>在不断的学习中，碰到一个有趣的问题:“在JavaScript中，到底是值传递，还是引用传递呢？函数参数是按什么传递呢？”</p><p>引用文章:</p><ul><li><a href="https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/">JavaScript的值传递和引用传递</a></li><li><a href="https://segmentfault.com/a/1190000005794070">JS中的值是按值传递，还是按引用传递呢？</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/10">JavaScript深入之参数按值传递</a></li><li><a href="https://segmentfault.com/a/1190000006752076">JavaScript 深入了解基本类型和引用类型的值</a></li></ul><h2 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a>JavaScript的数据类型</h2><p>JavaScript 有 5 种基本的数据类型（值类型），分别是:<code>Boolean</code>、<code>null</code>、<code>undefined</code>、<code>String</code> 和 <code>Number</code>。还有3种引用数据类型:<code>Object</code>、<code>Array</code>、<code>Function</code>，它们通过引用来传递。</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>如果一个基本的数据类型绑定到某个变量，我们可以认为该变量包含这个基本数据类型的值。<br>并且基本类型的变量是存放在栈内存（Stack）里的</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var x &#x3D; 10;var y &#x3D; &quot;abc&quot;;var z &#x3D; null;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当我们使用=将这些变量赋值到另外的变量，实际上是将对应的值拷贝了一份，然后赋值给新的变量。我们把它称作值传递。</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var x &#x3D; 10;var y &#x3D; &quot;abc&quot;;var a &#x3D; x;var b &#x3D; y;console.log(x, y, a, b); &#x2F;&#x2F; 10, &#39;abc&#39;, 10, &#39;abc&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>a</code>和<code>x</code>都包含 10，<code>b</code>和<code>y</code>都包含’abc’，并且它们是完全独立的拷贝，互不干涉。如果我们将a的值改变，x不会受到影响。这就是值传递，不会因为被赋值后的变量改变而导致原变量改变。</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>如果一个变量绑定到一个非基本数据类型(Array, Function, Object)，那么它只记录了一个内存地址，该地址存放了具体的数据。注意之前提到指向基本数据类型的变量相当于包含了数据，而现在指向非基本数据类型的变量本身是不包含数据的。<br>并且引用类型的值是保存在堆内存（Heap）中的对象（Object）。<br>与其他编程语言不同，JavaScript 不能直接操作对象的内存空间（堆内存）。</p><blockquote><p>栈内存中保存了变量标识符和指向堆内存中该对象的指针<br>堆内存中保存了对象的内容</p></blockquote><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var reference &#x3D; [1];var refCopy &#x3D; reference;reference.push(2);console.log(reference, refCopy); &#x2F;&#x2F; [1, 2], [1, 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>reference</code>和<code>refCopy</code>指向同一个数组。 如果我们更新<code>reference</code>，<code>refCopy</code>也会受到影响。可见，引用后的对象更新后，被引用的对象也更新了。<br>关键点:</p><blockquote><p>运算符=就是创建或修改变量在内存中的指向.<br>初始化变量时为创建,重新赋值即为修改</p></blockquote><p>举一个例子</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var a &#x3D; &#123;b: 1&#125;;&#x2F;&#x2F; a &#x3D; &#123;b: 1&#125;var c &#x3D; a;&#x2F;&#x2F; c &#x3D; &#123;b: 1&#125;a &#x3D; 2;&#x2F;&#x2F; 重新赋值aconsole.log(c);&#x2F;&#x2F; &#123;b: 1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接着是上一段代码在内存中的分布:  </p><table><thead><tr><th>栈</th><th>堆</th></tr></thead><tbody><tr><td>a,c</td><td>b</td></tr></tbody></table><p>然后一步一步执行代码:</p><ol><li>创建变量a指向对象{b: 1};</li><li>创建变量c指向对象{b: 1};</li><li>a重新指向常量区的2;  </li></ol><table><thead><tr><th>栈</th><th>堆</th><th>常量区</th></tr></thead><tbody><tr><td>a</td><td></td><td>2</td></tr><tr><td>c</td><td>{b:1}</td><td></td></tr></tbody></table><p>所以c从始至终都是指向对象{b: 1}.</p><h3 id="和-的比较"><a href="#和-的比较" class="headerlink" title="==和===的比较"></a>==和===的比较</h3><p>对于基本类型的变量，==会对变量进行隐式转换，可以对不同类型的变量进行比较，===不仅进行值得比较，还要进行数据类型的比较。<br>对于引用类型的变量，==和===只会判断引用的地址是否相同，而不会判断对象具体里属性以及值是否相同。因此，如果两个变量指向相同的对象，则返回<code>true</code>。</p><h2 id="函数参数按值传递"><a href="#函数参数按值传递" class="headerlink" title="函数参数按值传递"></a>函数参数按值传递</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在《JavaScript高级程序设计》第三版 4.1.3，讲到传递参数：</p><blockquote><p>ECMAScript中所有函数的参数都是按值传递的。</p></blockquote><h3 id="按值传递"><a href="#按值传递" class="headerlink" title="按值传递"></a>按值传递</h3><p>举个简单的例子：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var value &#x3D; 1;function foo(v) &#123;    v &#x3D; 2;    console.log(v); &#x2F;&#x2F;2&#125;foo(value);console.log(value) &#x2F;&#x2F; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很好理解，当传递 value 到函数 foo 中，相当于拷贝了一份 value，假设拷贝的这份叫 _value，函数中修改的都是 _value 的值，而不会影响原来的 value 值。</p><h3 id="按共享传递-call-by-sharing"><a href="#按共享传递-call-by-sharing" class="headerlink" title="按共享传递 call by sharing"></a>按共享传递 call by sharing</h3><p>准确的说，JS中的基本类型按值传递，对象类型按共享传递的(call by sharing，也叫按对象传递、按对象共享传递)。最早由Barbara Liskov. 在1974年的GLU语言中提出。该求值策略被用于Python、Java、Ruby、JS等多种语言。<br>该策略的重点是：调用函数传参时，函数接受对象实参引用的副本(既不是按值传递的对象副本，也不是按引用传递的隐式引用)。 它和按引用传递的不同在于：在共享传递中对函数形参的赋值，不会影响实参的值。如下面例子中，不可以通过修改形参o的值，来修改obj的值。</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var obj &#x3D; &#123;x : 1&#125;;function foo(o) &#123;    o &#x3D; 100;&#125;foo(obj);console.log(obj.x); &#x2F;&#x2F; 仍然是1, obj并未被修改为100.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而，虽然引用是副本，引用的对象是相同的。它们共享相同的对象，所以修改形参对象的属性值，也会影响到实参的属性值。</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var obj &#x3D; &#123;x : 1&#125;;function foo(o) &#123;    o.x &#x3D; 3;&#125;foo(obj);console.log(obj.x); &#x2F;&#x2F; 3, 被修改了!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>乍一看，函数的参数为对象时，好像是引用传递，但是红宝书说ECMAScript中所有函数的参数都是按值传递的, 这是没错的。但是<strong>拷贝副本也是一种值的拷贝</strong>，这时会觉得是引用传递，但实际上还是值的传递。理解这个问题的关键在于如何理解值传递和引用类型，这里要强调的是<strong>数据类型</strong>和<strong>方法参数</strong>的传递方式没有<strong>半毛钱关系</strong>。<br>简单来说, <strong>引用类型的值传递</strong>, 在方法内部如果对形参重新赋值, 哪怕是同一个类的对象, 在赋值后修改对象的属性, 实参的对应的属性值都不会改变, 同时实参指向的对象也不变, 而形参在重新赋值后已经指向一个新的对象了; <strong>而引用类型的引用传递</strong>, 在方法内部如果对形参重新赋值, 那么实参也跟着重新赋值, 实参最初所指向的那个对象将不被任何变量所指向。其实就是说形参也会被分配一个新的地址，指向实参的值。</p><h2 id="一道简单的题"><a href="#一道简单的题" class="headerlink" title="一道简单的题"></a>一道简单的题</h2><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function changeAgeAndReference(person) &#123;    person.age &#x3D; 25;    person &#x3D; &#123;        name: &quot;John&quot;,        age: 50    &#125;;    return person;&#125;var personObj1 &#x3D; &#123;    name: &quot;Alex&quot;,    age: 30&#125;;var personObj2 &#x3D; changeAgeAndReference(personObj1);console.log(personObj1); &#x2F;&#x2F; -&gt; ?console.log(personObj2); &#x2F;&#x2F; -&gt; ?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，若有错误的地方，欢迎大家指出来！</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mpvue踩过的坑</title>
      <link href="2021/09/29/mpvuesteppedpit/"/>
      <url>2021/09/29/mpvuesteppedpit/</url>
      
        <content type="html"><![CDATA[<p>前言：暑假期间，为了完成一个校内项目，需要开发一个小程序，因为有Vue的基础，所以采用了<a href="http://mpvue.com/">mpvue</a> 框架进行开发，本篇博客记录了一些我碰到的坑以及注意事项</p><h2 id="为什么我新增了页面，没有反应？"><a href="#为什么我新增了页面，没有反应？" class="headerlink" title="为什么我新增了页面，没有反应？"></a>为什么我新增了页面，没有反应？</h2><p>因为 webpack 编译的文件是由配置的 entry 决定的，新增的页面并没有添加进 entry，所以需要手动 <code>npm run dev</code> 一下，考虑不是高频操作，所以还可以忍受</p><h2 id="如何获取小程序在-page-onLoad-时候传递的-options"><a href="#如何获取小程序在-page-onLoad-时候传递的-options" class="headerlink" title="如何获取小程序在 page onLoad 时候传递的 options?"></a>如何获取小程序在 page onLoad 时候传递的 options?</h2><p>在所有 页面 的组件内可以通过 this.$root.$mp.query 进行获取。</p><h2 id="如何正确引用并使用微信小程序的原生UI库"><a href="#如何正确引用并使用微信小程序的原生UI库" class="headerlink" title="如何正确引用并使用微信小程序的原生UI库?"></a>如何正确引用并使用微信小程序的原生UI库?</h2><p>利用npm安装，或者git clone后将dist目录移到相关目录后，在根目录下的<code>app.json</code>文件中，对<code>usingComponents</code>进行相关配置对应对路径即可。以<a href="https://youzan.github.io/vant-weapp/#/home">vant-weapp</a> 中的van-button组件为例</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  ...<span class="token punctuation">,</span>  <span class="token property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"van-button"</span><span class="token operator">:</span> <span class="token string">"/static/vant/button/index"</span><span class="token punctuation">,</span>    ...  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  ...<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用时，需要对组件进行双向绑定对时候，须遵守mpvue的相关语法，此处用van-field为例，代码如下</p><blockquote><p>官方示例</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-field</span>    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; value &#125;&#125;<span class="token punctuation">"</span></span>    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span>    <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; false &#125;&#125;<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">bind:</span>change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onChange<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        value<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实际使用</p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-field</span>    <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span>    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span>    <span class="token attr-name">:border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>    <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value=$event.mp.detail<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">&#123;</span>            value<span class="token operator">:</span> <span class="token string">''</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很显然，我们需要做的就是将微信小程序中双向绑定的语法改为mpvue的双向绑定语法，在微信小程序中，attribute的风格为mustache style，既<code>&#123;&#123;value&#125;&#125;</code>的形式，进行修改时，不需要带<code>&#123;&#123;&#125;&#125;</code>，并且如果是绑定的是属性，需要在属性前加上<code>:</code>，如果绑定的是监听DOM事件，需要加上<code>@</code>，例如</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;value&#125;&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>//需改为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tapTest<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tapName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Click me! <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>//需改为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tapTest<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tapName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Click me! <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意！监听DOM事件的修改方式需按下表进行修改</p></blockquote><p>这是事件映射表，修改时需对照此表进行修改，左侧为 WEB 事件，右侧为 小程序 对应事件</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"click"</span><span class="token operator">:</span> <span class="token string">"tap"</span><span class="token punctuation">,</span>    <span class="token property">"touchstart"</span><span class="token operator">:</span> <span class="token string">"touchstart"</span><span class="token punctuation">,</span>    <span class="token property">"touchmove"</span><span class="token operator">:</span> <span class="token string">"touchmove"</span><span class="token punctuation">,</span>    <span class="token property">"touchcancel"</span><span class="token operator">:</span> <span class="token string">"touchcancel"</span><span class="token punctuation">,</span>    <span class="token property">"touchend"</span><span class="token operator">:</span> <span class="token string">"touchend"</span><span class="token punctuation">,</span>    <span class="token property">"tap"</span><span class="token operator">:</span> <span class="token string">"tap"</span><span class="token punctuation">,</span>    <span class="token property">"longtap"</span><span class="token operator">:</span> <span class="token string">"longtap"</span><span class="token punctuation">,</span>    <span class="token property">"input"</span><span class="token operator">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span>    <span class="token property">"change"</span><span class="token operator">:</span> <span class="token string">"change"</span><span class="token punctuation">,</span>    <span class="token property">"submit"</span><span class="token operator">:</span> <span class="token string">"submit"</span><span class="token punctuation">,</span>    <span class="token property">"blur"</span><span class="token operator">:</span> <span class="token string">"blur"</span><span class="token punctuation">,</span>    <span class="token property">"focus"</span><span class="token operator">:</span> <span class="token string">"focus"</span><span class="token punctuation">,</span>    <span class="token property">"reset"</span><span class="token operator">:</span> <span class="token string">"reset"</span><span class="token punctuation">,</span>    <span class="token property">"confirm"</span><span class="token operator">:</span> <span class="token string">"confirm"</span><span class="token punctuation">,</span>    <span class="token property">"columnchange"</span><span class="token operator">:</span> <span class="token string">"columnchange"</span><span class="token punctuation">,</span>    <span class="token property">"linechange"</span><span class="token operator">:</span> <span class="token string">"linechange"</span><span class="token punctuation">,</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    <span class="token property">"scrolltoupper"</span><span class="token operator">:</span> <span class="token string">"scrolltoupper"</span><span class="token punctuation">,</span>    <span class="token property">"scrolltolower"</span><span class="token operator">:</span> <span class="token string">"scrolltolower"</span><span class="token punctuation">,</span>    <span class="token property">"scroll"</span><span class="token operator">:</span> <span class="token string">"scroll"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生命周期的区别"><a href="#生命周期的区别" class="headerlink" title="生命周期的区别"></a>生命周期的区别</h2><p>总所周知，Vue的生命周期是精髓所在，下图为mpvue的生命周期图示<br><img src="http://mpvue.com/assets/img/lifecycle.a8762770.jpg" alt="mpvue"><br>详细的解释请看<a href="http://mpvue.com/mpvue/">mpvue使用手册</a> 和 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html">微信小程序生命周期</a><br>这里要注意的是，如无特殊需求，请不要使用小程序的生命周期钩子，善用好生命周期会对项目有极大的帮助！</p><h2 id="踩过的一些坑"><a href="#踩过的一些坑" class="headerlink" title="踩过的一些坑"></a>踩过的一些坑</h2><h3 id="click事件捕捉问题"><a href="#click事件捕捉问题" class="headerlink" title="click事件捕捉问题"></a>click事件捕捉问题</h3><p><a href="https://github.com/Rychou/mpvue-vant/issues/47">van-tabs组件@click事件捕捉问题</a>  </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 修改前</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改后</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'vclick'</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-tabs</span> <span class="token attr-name">:active</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span> <span class="token attr-name">@vclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">handleClick</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> mp <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mp<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用van-tabs组件时，事件捕获的信息丢失，经过一番查找后才发现是mpvue的问题,这里引用一位开发者的回答</p><blockquote><p><code>detail</code>信息被封装到<code>e.mp.detail</code>中去了。这种<code>vant</code>组件库用原生写的组件是可以捕获到<code>click</code>这种事件的。文档中指的是<code>vue</code>组件在引用时无法使用<code>@click</code>。  </p></blockquote><p>因此，如果遇到click事件出现问题，请参照上面的方法对组件进行修改</p><h3 id="background-color在main-json配置没有生效"><a href="#background-color在main-json配置没有生效" class="headerlink" title="background-color在main.json配置没有生效"></a>background-color在<code>main.json</code>配置没有生效</h3><p>一般来说，<code>style tag</code>会自动加上<code>scoped</code>属性，<code>scoped</code>是为了解决全局css冲突的问题，因此，你的css selector是会被带上hash的，因此无法生效，例如</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*你的代码*/</span><span class="token selector">page</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*编译结果*/</span><span class="token selector">page.data-v-fe19b4ea</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最好不要去掉<code>style tag</code>里的<code>scoped</code>属性，我是这样解决的</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*最外层的div加上一个class cover*/</span><span class="token selector">.cover</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #e5e5e5<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">overscroll-behavior-y</span><span class="token punctuation">:</span> contain<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylus<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet/stylus<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">@import <span class="token string">"../../../static/stylus/mixin.styl"</span>body  background-color #fff</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一些建议"><a href="#一些建议" class="headerlink" title="一些建议"></a>一些建议</h3><h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><p>在微信小程序中，建议对request函数进行封装，不仅提升开发时的效率，代码也会更容易理解，将<code>wx.request</code>函数进行配置后封装，返回<code>Promise</code>对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//我是这样封装的，进行开发时需根据实际需求进行修改</span><span class="token keyword">import</span> Config <span class="token keyword">from</span> <span class="token string">'./config'</span><span class="token keyword">import</span> Token <span class="token keyword">from</span> <span class="token string">'./token'</span><span class="token keyword">function</span> <span class="token function">request</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> data<span class="token punctuation">,</span> header <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> noRefetch <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  wx<span class="token punctuation">.</span><span class="token function">showLoading</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    title<span class="token operator">:</span> <span class="token string">'加载中'</span> <span class="token comment">//  数据请求前loading</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> Config<span class="token punctuation">.</span>baseUrl <span class="token operator">+</span> url<span class="token punctuation">,</span>      method<span class="token operator">:</span> method<span class="token punctuation">,</span>      data<span class="token operator">:</span> data<span class="token punctuation">,</span>      header<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'token'</span><span class="token operator">:</span> wx<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'content-type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> code <span class="token operator">=</span> res<span class="token punctuation">.</span>statusCode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> startChar <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startChar <span class="token operator">===</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token string">'401'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>noRefetch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              Token<span class="token punctuation">.</span><span class="token function">getTokenFromServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">token</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">//  获取token之后重新发送请求</span>                <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                  <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        wx<span class="token punctuation">.</span><span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">get</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">post</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  request<span class="token punctuation">,</span>  get<span class="token punctuation">,</span>  post<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="promisify"><a href="#promisify" class="headerlink" title="promisify"></a>promisify</h4><p>将微信小程序的api进行封装，转化为promise</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 用于把微信原生callback的api，转换为promise * * 示例： *     import &#123;promisify&#125; from '...' // 这一部可以在全局引入或挂载 *     const res= await promisify(wx.showModal,&#123;content:'确认删除？'&#125;) */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span> <span class="token parameter">api<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token operator">...</span>params</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">api</span><span class="token punctuation">(</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  options<span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>      success<span class="token operator">:</span> resolve<span class="token punctuation">,</span>      fail<span class="token operator">:</span> reject    <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>params <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span> <span class="token parameter">err</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 暴露的是一个对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  promisify<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mpvue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mpvue </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue和Electron的所有坑总结</title>
      <link href="2021/06/10/vueelectron/"/>
      <url>2021/06/10/vueelectron/</url>
      
        <content type="html"><![CDATA[<h1 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h1><p><a href="https://www.electronjs.org/">Electron</a> 相当于一个浏览器的外壳，可以把网页程序嵌入到壳里面，可以运行在桌面上的一个程序，可以把网页打包成一个在桌面运行的程序，通俗来说就是软件，比如像QQ、优酷、网易音乐等等。功能的强大超出你的想象，可以构建跨平台桌面程序，本身支持node.js，可以使用node.js的一些模块。</p><h2 id="一、项目搭建"><a href="#一、项目搭建" class="headerlink" title="一、项目搭建"></a>一、项目搭建</h2><h3 id="1-安装electron"><a href="#1-安装electron" class="headerlink" title="1. 安装electron"></a>1. 安装electron</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vue <span class="token function">add</span> electron-builder<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>安装完成后，查看项目的目录结构，会自动在src目录下生成<code>background.js</code>并且修改<code>package.json</code></p></blockquote><h3 id="2-运行"><a href="#2-运行" class="headerlink" title="2.运行"></a>2.运行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run electron:serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在进行此步骤时，有很大的几率会报错<code>Error: post install error, please remove node_modules before retry!</code> ，此时需要将node_modules全部删掉，然后重新执行npm install。又有很大的几率会报错，内容大致是提示叫你重新安装electron，此时只需要将node_modules下的electron文件夹删除，然后执行npm install electron就可以了。在安装electron时的相关npm包时，官方推荐使用yarn，但是因为个人习惯原因，使用npm来进行安装。</p><h3 id="3-打包"><a href="#3-打包" class="headerlink" title="3.打包"></a>3.打包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run electron:build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述三个步骤看上去十分简单，但是实际进行操作时，出现了一堆错误，下面的内容就是总结所有踩过的坑。</p><h2 id="二、总结遇到的坑"><a href="#二、总结遇到的坑" class="headerlink" title="二、总结遇到的坑"></a>二、总结遇到的坑</h2><h3 id="1-Vuex"><a href="#1-Vuex" class="headerlink" title="1. Vuex"></a>1. Vuex</h3><h4 id="1-Vuex的安装"><a href="#1-Vuex的安装" class="headerlink" title="1.Vuex的安装"></a>1.Vuex的安装</h4><p>在开发时，我当时直接使用了<code>npm install vuex</code>来使用vuex，一切问题都没有，非常的正常，但是build后再打开，发现vuex失效了，后面经过查找才发现，在electron使用vuex时，应该使用下面的命令安装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vuex-electron --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-Vuex的配置"><a href="#2-Vuex的配置" class="headerlink" title="2.Vuex的配置"></a>2.Vuex的配置</h4><p>第一步，先在<code>src</code>目录下新建一个文件夹<code>store</code>，然后在这个文件夹内创建文件<code>index.js</code></p><p>根据官方的样例<a href="https://github.com/vue-electron/vuex-electron-example">Vuex Electron</a>，<code>index.js</code>的内容如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createPersistedState<span class="token punctuation">,</span> createSharedMutations <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"vuex-electron"</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    count<span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"increment"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"decrement"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      state<span class="token punctuation">.</span>count<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">createPersistedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createSharedMutations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  strict<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">"production"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这会引发一个问题，如果你的项目里的代码全都是<code>this.$sotre.commit</code>，会发现执行相关代码时根本没有反应，并且控制台会报错<code>Please, don&#39;t use direct commit&#39;s, use dispatch instead of this.</code>，这是因为在import时，将<code>createSharedMutations</code>也一并引入了。</p><p>如果你用不上多进程共享数据的话，可以选择不导入<code>createSharedMutations</code>，注释或者删除相关代码，或者使用dispatch来进行相关操作。</p><h3 id="2-构建遇到的问题"><a href="#2-构建遇到的问题" class="headerlink" title="2. 构建遇到的问题"></a>2. 构建遇到的问题</h3><h4 id="1-在-vue文件中无法使用electronApi的问题"><a href="#1-在-vue文件中无法使用electronApi的问题" class="headerlink" title="1.在.vue文件中无法使用electronApi的问题"></a>1.在<code>.vue</code>文件中无法使用electronApi的问题</h4><p>在<code>src/main.js</code>添加下面两行代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> electron <span class="token keyword">from</span> <span class="token string">'electron'</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$electron <span class="token operator">=</span> electron<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>vue.config.js</code>配置防止浏览器报错<code>&#39;__dirname&#39; is not defind</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    pluginOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        electronBuilder<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            nodeIntegration<span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-在-vue文件中使用this-electron-remote字段为undefined"><a href="#2-在-vue文件中使用this-electron-remote字段为undefined" class="headerlink" title="2.在.vue文件中使用this.$electron.remote字段为undefined"></a>2.在<code>.vue</code>文件中使用<code>this.$electron.remote</code>字段为<code>undefined</code></h4><p>需要“显”式的申明 enableRemoteModule: true<br>在项目目录<code>src</code>下的<code>background.js</code>中修改</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        width<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>        height<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>        frame<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        resizable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        webPreferences<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Use pluginOptions.nodeIntegration, leave this alone</span>            <span class="token comment">// See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info</span>            nodeIntegration<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ELECTRON_NODE_INTEGRATION</span><span class="token punctuation">,</span>            enableRemoteModule<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ELECTRON_NODE_INTEGRATION</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>vue.config.js</code>中添加</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    pluginOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        electronBuilder<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            nodeIntegration<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            enableRemoteModule<span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-构建好的项目想让别人也使用，因此想取消顶部工具栏"><a href="#3-构建好的项目想让别人也使用，因此想取消顶部工具栏" class="headerlink" title="3.构建好的项目想让别人也使用，因此想取消顶部工具栏"></a>3.构建好的项目想让别人也使用，因此想取消顶部工具栏</h4><p>在<code>background.js</code>里，修改最上方的代码，将Menu也引入进来</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>app<span class="token punctuation">,</span> protocol<span class="token punctuation">,</span> BrowserWindow<span class="token punctuation">,</span> Menu<span class="token punctuation">,</span> dialog<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'electron'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改 <code>createWindow()</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  width<span class="token operator">:</span> <span class="token number">1294</span><span class="token punctuation">,</span>  height<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>  webPreferences<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Use pluginOptions.nodeIntegration, leave this alone</span>    <span class="token comment">// See nklayman.github.io/vue-cli-plugin-electron-builder/guide/security.html#node-integration for more info</span>    nodeIntegration<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ELECTRON_NODE_INTEGRATION</span><span class="token punctuation">,</span>    contextIsolation<span class="token operator">:</span> <span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ELECTRON_NODE_INTEGRATION</span><span class="token punctuation">,</span>    enableRemoteModule<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ELECTRON_NODE_INTEGRATION</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-需要自定义build出来的exe等安装程序"><a href="#4-需要自定义build出来的exe等安装程序" class="headerlink" title="4.需要自定义build出来的exe等安装程序"></a>4.需要自定义build出来的exe等安装程序</h4><p>在根目录下创建文件<code>vue.config.js</code>，然后进行相关配置，代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    publicPath<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'./'</span> <span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    pluginOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        electronBuilder<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            nodeIntegration<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            builderOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">'appId'</span><span class="token operator">:</span> <span class="token string">'example'</span><span class="token punctuation">,</span>                <span class="token string">'productName'</span><span class="token operator">:</span> <span class="token string">'example'</span><span class="token punctuation">,</span> <span class="token comment">// 项目名，也是生成的安装文件名，即mzDemo.exe</span>                <span class="token string">'copyright'</span><span class="token operator">:</span> <span class="token string">'Marshall Copyright © 2021'</span><span class="token punctuation">,</span> <span class="token comment">// 版权信息</span>                <span class="token string">'files'</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">'./**/*'</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">'directories'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string">'output'</span><span class="token operator">:</span> <span class="token string">'./app_dist'</span> <span class="token comment">// 输出文件路径</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string">'win'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// win相关配置</span>                    <span class="token string">'icon'</span><span class="token operator">:</span> <span class="token string">'./public/favicon.ico'</span><span class="token punctuation">,</span> <span class="token comment">// 图标，当前图标在根目录下，注意这里有两个坑</span>                    <span class="token string">"requestedExecutionLevel"</span><span class="token operator">:</span> <span class="token string">"requireAdministrator"</span><span class="token punctuation">,</span> <span class="token comment">//获取管理员权限</span>                    <span class="token string">'target'</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                        <span class="token string">'target'</span><span class="token operator">:</span> <span class="token string">'nsis'</span><span class="token punctuation">,</span> <span class="token comment">// 利用nsis制作安装程序</span>                        <span class="token string">'arch'</span><span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token string">'x64'</span><span class="token punctuation">,</span> <span class="token comment">// 64位</span>                            <span class="token string">'ia32'</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                artifactName<span class="token operator">:</span> <span class="token string">'$&#123;productName&#125;_Setup_$&#123;version&#125;_$&#123;platform&#125;.$&#123;ext&#125;'</span><span class="token punctuation">,</span>                <span class="token string">'nsis'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    include<span class="token operator">:</span> <span class="token string">'./installer.nsh'</span><span class="token punctuation">,</span><span class="token comment">//默认安装路径</span>                    <span class="token string">'oneClick'</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否一键安装</span>                    <span class="token string">'allowElevation'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许请求提升。 如果为false，则用户必须使用提升的权限重新启动安装程序。</span>                    <span class="token string">'allowToChangeInstallationDirectory'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许修改安装目录</span>                    <span class="token string">'installerIcon'</span><span class="token operator">:</span> <span class="token string">'./favicon.ico'</span><span class="token punctuation">,</span> <span class="token comment">// 安装图标</span>                    <span class="token string">'uninstallerIcon'</span><span class="token operator">:</span> <span class="token string">'./favicon.ico'</span><span class="token punctuation">,</span> <span class="token comment">// 卸载图标</span>                    <span class="token string">'installerHeaderIcon'</span><span class="token operator">:</span> <span class="token string">'./favicon.ico'</span><span class="token punctuation">,</span> <span class="token comment">// 安装时头部图标</span>                    <span class="token string">'createDesktopShortcut'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 创建桌面图标</span>                    <span class="token string">'createStartMenuShortcut'</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 创建开始菜单图标</span>                    <span class="token string">'shortcutName'</span><span class="token operator">:</span> <span class="token string">'nfuEcampusUtils'</span> <span class="token comment">// 图标名称(项目名称)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面代码里,<code>nsis</code>的配置里出现了一个<code>include : &#39;./installer.nsh&#39;</code> 这个文件是用来配置默认安装路径的。同样，在根目录创建文件<code>installer.nsh</code>，我是这样写的:</p><pre class="line-numbers language-nsis" data-language="nsis"><code class="language-nsis"><span class="token important">!macro</span> preInit  <span class="token keyword">SetRegView</span> <span class="token number">64</span>  <span class="token keyword">WriteRegExpandStr</span> <span class="token property">HKLM</span> <span class="token string">"$&#123;INSTALL_REGISTRY_KEY&#125;"</span> InstallLocation <span class="token string">"C:\Program Files\$&#123;PRODUCT_NAME&#125;"</span>  <span class="token keyword">WriteRegExpandStr</span> <span class="token property">HKCU</span> <span class="token string">"$&#123;INSTALL_REGISTRY_KEY&#125;"</span> InstallLocation <span class="token string">"C:\Program Files\$&#123;PRODUCT_NAME&#125;"</span>  <span class="token keyword">SetRegView</span> <span class="token number">32</span>  <span class="token keyword">WriteRegExpandStr</span> <span class="token property">HKLM</span> <span class="token string">"$&#123;INSTALL_REGISTRY_KEY&#125;"</span> InstallLocation <span class="token string">"C:\Program Files (x86)\$&#123;PRODUCT_NAME&#125;"</span>  <span class="token keyword">WriteRegExpandStr</span> <span class="token property">HKCU</span> <span class="token string">"$&#123;INSTALL_REGISTRY_KEY&#125;"</span> InstallLocation <span class="token string">"C:\Program Files (x86)\$&#123;PRODUCT_NAME&#125;"</span><span class="token important">!macroend</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-我想让我的项目能持续迭代更新，并且让使用者也能在使用时收到更新通知"><a href="#5-我想让我的项目能持续迭代更新，并且让使用者也能在使用时收到更新通知" class="headerlink" title="5.我想让我的项目能持续迭代更新，并且让使用者也能在使用时收到更新通知"></a>5.我想让我的项目能持续迭代更新，并且让使用者也能在使用时收到更新通知</h4><p>本方法的使用条件是：你开发的是一个私有的 Electron 应用程序，或者你没有在 GitHub Releases 中公开发布。官方给了几种方法<a href="https://www.electronjs.org/docs/tutorial/updates#%E9%83%A8%E7%BD%B2%E6%9B%B4%E6%96%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">部署更新服务器</a></p><p>但我觉得都太麻烦了，想直接将新版放到oss里面，并且速度也更客观，于是我进行查找后，得到了有效的方案。</p><p>先修改<code>vue.config.js</code>里的<code>builderOptions</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">,</span>    pluginOptions<span class="token operator">:</span><span class="token punctuation">&#123;</span>    electronBuilder：<span class="token punctuation">&#123;</span>    ···，    builderOptions<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">,</span>    publish<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>provider<span class="token operator">:</span> <span class="token string">'generic'</span><span class="token punctuation">,</span>url<span class="token operator">:</span><span class="token string">'https://yourdomain.com/app'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装依赖并且修改<code>background.js</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> electron-updater<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>autoUpdater<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron-updater'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span><span class="token punctuation">,</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">WEBPACK_DEV_SERVER_URL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">await</span> win<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">WEBPACK_DEV_SERVER_URL</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">IS_TEST</span><span class="token punctuation">)</span> win<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">openDevTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">createProtocol</span><span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">)</span>        win<span class="token punctuation">.</span><span class="token function">loadURL</span><span class="token punctuation">(</span><span class="token string">'app://./index.html'</span><span class="token punctuation">)</span>        autoUpdater<span class="token punctuation">.</span><span class="token function">checkForUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ======================================================================</span><span class="token comment">// 更新模块</span><span class="token comment">// ======================================================================</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">WEBPACK_DEV_SERVER_URL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  autoUpdater<span class="token punctuation">.</span>autoDownload <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment">// autoUpdater.signals.updateDownloaded(() => &#123;&#125;)</span>  autoUpdater<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'检查更新失败: '</span> <span class="token operator">+</span> error <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">'unknown'</span> <span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>stack <span class="token operator">||</span> error<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dialog<span class="token punctuation">.</span><span class="token function">showErrorBox</span><span class="token punctuation">(</span><span class="token string">'Error: '</span><span class="token punctuation">,</span> error <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">'unknown'</span> <span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>stack <span class="token operator">||</span> error<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  autoUpdater<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'update-available'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// var appInfo = &#123;</span>    <span class="token comment">//   info: info.version,</span>    <span class="token comment">//   files: info.files,</span>    <span class="token comment">//   path: info.path,</span>    <span class="token comment">//   sha512: info.sha512,</span>    <span class="token comment">//   releaseDate: info.releaseDate</span>    <span class="token comment">// &#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    dialog<span class="token punctuation">.</span><span class="token function">showMessageBox</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>      title<span class="token operator">:</span> <span class="token string">'更新提示'</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token string">'软件需要更新，您是否立即更新？'</span><span class="token punctuation">,</span>      buttons<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'推迟'</span><span class="token punctuation">,</span> <span class="token string">'立即更新'</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'index:'</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>response<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>response <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'选择升级'</span><span class="token punctuation">)</span>        autoUpdater<span class="token punctuation">.</span><span class="token function">downloadUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'选择不升级:'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 检查更新时触发</span>  autoUpdater<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'update-available'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'检查更新时触发'</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token comment">// dialog.showMessageBox(&#123;</span>    <span class="token comment">//   title: '检查更新',</span>    <span class="token comment">//   message: '正在检查更新'</span>    <span class="token comment">// &#125;)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 没有可用更新</span>  autoUpdater<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'update-not-available'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'没有可用更新'</span><span class="token punctuation">)</span>    <span class="token comment">// dialog.showMessageBox(&#123;</span>    <span class="token comment">//   title: '已是最新版',</span>    <span class="token comment">//   message: '当前版本是最新版本。'</span>    <span class="token comment">// &#125;)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 安装更新</span>  autoUpdater<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'update-downloaded'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token comment">// console.log(res)</span>    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'下载完毕！提示安装更新'</span><span class="token punctuation">)</span>    dialog<span class="token punctuation">.</span><span class="token function">showMessageBox</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      title<span class="token operator">:</span> <span class="token string">'升级提示！'</span><span class="token punctuation">,</span>      message<span class="token operator">:</span> <span class="token string">'已自动升级为最新版，请重启应用！'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'确认安装'</span><span class="token punctuation">)</span>      <span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> autoUpdater<span class="token punctuation">.</span><span class="token function">quitAndInstall</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">//下载进度</span>  autoUpdater<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'download-progress'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>percent<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用build打包第一个版本(1.0.0)</p><p>打包后 <code>dist_electron</code> 目录中有 <code>*.blockmap</code> 格式的文件;</p><p>将文件复制到 ‘更新服务器’ (<a href="http://yourdomain.com/app/">http://yourdomain.com/app/</a>) 目录下;</p><p>然后再打包一个升级版(1.1.0)</p><p>打包后 <code>dist_electron</code> 有如下三个文件：</p><ul><li><code>新版本安装包.exe</code></li><li><code>新版本_v1.1.0.blockmap</code>，</li><li><code>latest.yml</code></li></ul><p>将上面三个文件复制到 ‘更新服务器’ (<a href="http://yourdomain.com/app/">http://yourdomain.com/app/</a>) 目录下;</p><p>以后每次有更新就复制这三个文件至 ‘更新服务器’，保留旧版本的 <code>*.blockmap</code> 文件，旧版本的应用的执行文件(<code>.exe</code>)可以删除。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Three.js的插件-PhotoSphereViewer的基础教程</title>
      <link href="2021/05/21/photosphereviewer/"/>
      <url>2021/05/21/photosphereviewer/</url>
      
        <content type="html"><![CDATA[<p>前言：学校想开发一个全景地图，最后找到我这个工具人来做，无奈之下只好去学Three.js爆肝，本来是用Three.js直接开发的，做到一半发现了<a href="https://photo-sphere-viewer.js.org/">Photo Sphere Viewer</a>这个基于Three.js的插件，于是研究完它的文档后，重构了这个项目</p><h1 id="安装Photo-Sphere-Viewer"><a href="#安装Photo-Sphere-Viewer" class="headerlink" title="安装Photo Sphere Viewer"></a>安装Photo Sphere Viewer</h1><h2 id="用npm或yarn"><a href="#用npm或yarn" class="headerlink" title="用npm或yarn"></a>用npm或yarn</h2><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">npm install photo-sphere-vieweryarn add photo-sphere-viewer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="通过CDN"><a href="#通过CDN" class="headerlink" title="通过CDN"></a>通过CDN</h2><p><a href="https://www.jsdelivr.com/package/npm/photo-sphere-viewer">jsDelivr</a></p><h1 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h1><h2 id="必选项"><a href="#必选项" class="headerlink" title="必选项"></a>必选项</h2><ul><li><a href="https://threejs.org/">Three.js</a> (使用<code>build/three.min.js</code>文件)</li><li><a href="https://github.com/mistic100/uEvent">uEvent 2</a>(使用<code>browser.js</code>文件)</li></ul><h2 id="可选项"><a href="#可选项" class="headerlink" title="可选项"></a>可选项</h2><ul><li><a href="https://github.com/taylorhakes/promise-polyfill">promise-polyfill</a> 与IE兼容 (使用<code>dist/polyfill.min.js</code>文件)</li></ul><h1 id="创建第一个全景图"><a href="#创建第一个全景图" class="headerlink" title="创建第一个全景图"></a>创建第一个全景图</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/photo-sphere-viewer.min.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/three/build/three.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/uevent@2/browser.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/photo-sphere-viewer@4/dist/photo-sphere-viewer.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* the viewer container must have a defined size */</span>    <span class="token selector">#viewer</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100vw<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 50vh<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> viewer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhotoSphereViewer<span class="token punctuation">.</span>Viewer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        container<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#viewer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        panorama<span class="token operator">:</span> <span class="token string">'path/to/panorama.jpg'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的<code>panorama</code>必须是方形的图片，但是官方给出了多种适配器以进行不同方式的加载</p><h1 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h1><h2 id="默认适配器"><a href="#默认适配器" class="headerlink" title="默认适配器"></a>默认适配器</h2><p>panorama为默认方形全景图片</p><h2 id="立方体贴图适配器"><a href="#立方体贴图适配器" class="headerlink" title="立方体贴图适配器"></a>立方体贴图适配器</h2><p>Photo Sphere Viewer支持将立方体贴图作为六个不同的图像文件。这些文件可以作为对象或数组提供。使用立方体贴图时，完全支持Photo Sphere Viewer的所有功能。</p><p>例子</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">PhotoSphereViewer<span class="token punctuation">.</span>Viewer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  adapter<span class="token operator">:</span> PhotoSphereViewer<span class="token punctuation">.</span>CubemapAdapter<span class="token punctuation">,</span>  panorama<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    left<span class="token operator">:</span>   <span class="token string">'path/to/left.jpg'</span><span class="token punctuation">,</span>    front<span class="token operator">:</span>  <span class="token string">'path/to/front.jpg'</span><span class="token punctuation">,</span>    right<span class="token operator">:</span>  <span class="token string">'path/to/right.jpg'</span><span class="token punctuation">,</span>    back<span class="token operator">:</span>   <span class="token string">'path/to/back.jpg'</span><span class="token punctuation">,</span>    top<span class="token operator">:</span>    <span class="token string">'path/to/top.jpg'</span><span class="token punctuation">,</span>    bottom<span class="token operator">:</span> <span class="token string">'path/to/bottom.jpg'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 也可以以数组形式导入</span>panorama<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token string">'path/to/left.jpg'</span><span class="token punctuation">,</span>  <span class="token string">'path/to/front.jpg'</span><span class="token punctuation">,</span>  <span class="token string">'path/to/right.jpg'</span><span class="token punctuation">,</span>  <span class="token string">'path/to/back.jpg'</span><span class="token punctuation">,</span>  <span class="token string">'path/to/top.jpg'</span><span class="token punctuation">,</span>  <span class="token string">'path/to/bottom.jpg'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="等矩形瓷砖适配器-直译"><a href="#等矩形瓷砖适配器-直译" class="headerlink" title="等矩形瓷砖适配器(直译)"></a>等矩形瓷砖适配器(直译)</h2><blockquote><p>通过将大全景图切成许多小图块，可以减少初始加载时间和使用的带宽。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">PhotoSphereViewer<span class="token punctuation">.</span>Viewer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  adapter<span class="token operator">:</span> PhotoSphereViewer<span class="token punctuation">.</span>EquirectangularTilesAdapter<span class="token punctuation">,</span>  panorama<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    width<span class="token operator">:</span> <span class="token number">6000</span><span class="token punctuation">,</span>    cols<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>    rows<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>    baseUrl<span class="token operator">:</span> <span class="token string">'low_res.jpg'</span><span class="token punctuation">,</span>    <span class="token function-variable function">tileUrl</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">col<span class="token punctuation">,</span> row</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">tile_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>col<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>row<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.jpg</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>width</code>(必选项)</p><ul><li>类型:<code>number</code></li></ul><p>全景图的总宽度，高度始终为宽度/ 2。</p><p><code>cols</code>(必选项)</p><ul><li>类型:<code>number</code></li></ul><p>列数必须是2的幂（4、6、16、32、64），最大值是64。</p><p><code>rows</code>(必选项)</p><ul><li>类型:<code>number</code></li></ul><p>行数必须是2的幂（2、4、6、16、32），最大值是32。</p><p><code>tileUrl</code>(必选项)</p><ul><li>类型:<code>function: (col, row) =&gt; string</code></li></ul><p>用于构建图块URL的函数。</p><p><code>baseUrl</code>(可选项)</p><ul><li>类型:<code>string</code></li></ul><p>在加载图块时显示的低分辨率完整全景图的URL。</p><h3 id="准备全景图"><a href="#准备全景图" class="headerlink" title="准备全景图"></a>准备全景图</h3><p>使用<a href="https://imagemagick.org/">ImageMagick</a>可以轻松生成图块</p><p>假设有一个分辨率为8192x4096像素的图片，要切割成32行和16列，计算可以得出8192/32=256,4096/32=256。命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">magick panorama.jpg -crop 256x256 tile_%04d.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入的代码为</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> pano<span class="token operator">=</span><span class="token punctuation">&#123;</span>    desc<span class="token operator">:</span> <span class="token string">'example'</span><span class="token punctuation">,</span>    minFov<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>    base<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./img/lowQualityImg/example_low.JPG</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    position<span class="token operator">:</span> <span class="token punctuation">&#123;</span>longitude<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> latitude<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> zoom<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    config<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        width<span class="token operator">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>        cols<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>        rows<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>        <span class="token function-variable function">tileUrl</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">col<span class="token punctuation">,</span> row</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> num <span class="token operator">=</span> row <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">+</span> col            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./img/example/tile_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span><span class="token string">'000'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.jpg</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="个人觉得更为模块化的写法"><a href="#个人觉得更为模块化的写法" class="headerlink" title="个人觉得更为模块化的写法"></a>个人觉得更为模块化的写法</h2><p>将加载场景的一系列api打包为一个函数，每个场景作为数组存储，在需要切换场景时，只需要一个函数即可完成，下面是加载场景的函数(以等矩形瓷砖适配器为例)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">loadPanorama</span><span class="token punctuation">(</span><span class="token parameter">pano</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">THREE<span class="token punctuation">.</span>ImageLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    viewer<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> loader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>pano<span class="token punctuation">.</span>base<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">image</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> image<span class="token punctuation">.</span>width<span class="token punctuation">;</span>            canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> image<span class="token punctuation">.</span>height<span class="token punctuation">;</span>            <span class="token keyword">const</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">'rgba(255, 255, 255, 0.3)'</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">baseUrl</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> viewer<span class="token punctuation">.</span><span class="token function">setPanorama</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token operator">...</span>pano<span class="token punctuation">.</span>config<span class="token punctuation">,</span>                baseUrl<span class="token operator">:</span> baseUrl<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> pano<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            viewer<span class="token punctuation">.</span>navbar<span class="token punctuation">.</span><span class="token function">setCaption</span><span class="token punctuation">(</span>pano<span class="token punctuation">.</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>            viewer<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span><span class="token string">'minFov'</span><span class="token punctuation">,</span> pano<span class="token punctuation">.</span>minFov<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义场景</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> panos<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>        desc<span class="token operator">:</span> <span class="token string">'viewer1'</span><span class="token punctuation">,</span>        minFov<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        base<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./assets/img/lowQualityImg/viewer_low.JPG</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        position<span class="token operator">:</span> <span class="token punctuation">&#123;</span>longitude<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> latitude<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> zoom<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        config<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            width<span class="token operator">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>            cols<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>            rows<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>            <span class="token function-variable function">tileUrl</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">col<span class="token punctuation">,</span> row</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> num <span class="token operator">=</span> row <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">+</span> col                <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./assets/img/viewer1/tile_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span><span class="token string">'000'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.jpg</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        desc<span class="token operator">:</span> <span class="token string">'viewer2'</span><span class="token punctuation">,</span>        minFov<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        base<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./assets/img/lowQualityImg/viewer2_low.JPG</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        position<span class="token operator">:</span> <span class="token punctuation">&#123;</span>longitude<span class="token operator">:</span> <span class="token number">1.8939487733283173</span><span class="token punctuation">,</span> latitude<span class="token operator">:</span> <span class="token number">0.03337838088394118</span><span class="token punctuation">,</span> zoom<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        config<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            width<span class="token operator">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>            cols<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>            rows<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>            <span class="token function-variable function">tileUrl</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">col<span class="token punctuation">,</span> row</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> num <span class="token operator">=</span> row <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">+</span> col                <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./assets/img/viewer2/tile_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span><span class="token string">'000'</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.jpg</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切换场景时</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">loadPanorama</span><span class="token punctuation">(</span>panos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Three.js </tag>
            
            <tag> PhotoSphereViewer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js:async/await异常捕获</title>
      <link href="2021/05/07/awaitexceptioncatchmethod/"/>
      <url>2021/05/07/awaitexceptioncatchmethod/</url>
      
        <content type="html"><![CDATA[<p>Async/await 是 ES7 中的新特性，它可以让开发者编写异步代码像同步代码一样，的确它给我们带来了很多方便的地方，但是在 async/await 中如何来处理错误呢？在异步的调用中，会产生各种不同的错误，例如：HTTP 请求产生了错误、访问 DB 产生的异常、操作文件产生异常。在 Promise 的使用中，当遇到了错误，它会抛出一个异常，该异常将被捕获到一个方法回调中。在 async/await 中，我们又如何处理呢？</p><h2 id="Node-js-await异常捕获方法"><a href="#Node-js-await异常捕获方法" class="headerlink" title="Node.js:await异常捕获方法"></a>Node.js:await异常捕获方法</h2><h3 id="一、使用try-catch捕获异常"><a href="#一、使用try-catch捕获异常" class="headerlink" title="一、使用try/catch捕获异常"></a>一、使用try/catch捕获异常</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">verifyToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回顾上面的代码，try/catch 的确可以来解决错误异常的处理，但是让代码非常的不干净，原本 <code>async/await</code> 的优势就是让代码更佳的简约，这样一来又违背了它的初衷，这让我们进入了新的思考。</p><h3 id="二、使用to-js处理异常"><a href="#二、使用to-js处理异常" class="headerlink" title="二、使用to.js处理异常"></a>二、使用to.js处理异常</h3><h4 id="1-CommonJS环境下安装await-to-js"><a href="#1-CommonJS环境下安装await-to-js" class="headerlink" title="1.CommonJS环境下安装await-to-js"></a>1.CommonJS环境下安装await-to-js</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> i await-to-js --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-引入"><a href="#1-引入" class="headerlink" title="1.引入"></a>1.引入</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> to <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'await-to-js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>default<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span><span class="token punctuation">[</span>err<span class="token punctuation">,</span>res<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">to</span><span class="token punctuation">(</span><span class="token function">verifyToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-自己制作to-js"><a href="#2-自己制作to-js" class="headerlink" title="2.自己制作to.js"></a>2.自己制作to.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">to</span><span class="token punctuation">(</span><span class="token parameter">promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">[</span>err<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> to <span class="token keyword">from</span> <span class="token string">'./to.js'</span><span class="token keyword">const</span><span class="token punctuation">[</span>err<span class="token punctuation">,</span>res<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">to</span><span class="token punctuation">(</span><span class="token function">verifyToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在mpvue中使用vant-weapp组件库</title>
      <link href="2021/04/15/vantweappinmpvue/"/>
      <url>2021/04/15/vantweappinmpvue/</url>
      
        <content type="html"><![CDATA[<p>前言：因为在开发一个小程序，又正好想学学前端，于是用了mpvue框架来进行开发，思来想去又想引入一些css框架来美化页面，找了半天，一开始想用tailwind的，但是导入了半天都没办法正常使用，后面看到别人推荐<a href="https://vant-contrib.gitee.io/vant-weapp/#/home">Vant Weapp</a> 。虽然过程不是很顺利，但是经过不懈摸索，还是整出来了。</p><h2 id="如何在mpvue中使用Vant-Weapp？"><a href="#如何在mpvue中使用Vant-Weapp？" class="headerlink" title="如何在mpvue中使用Vant Weapp？"></a>如何在mpvue中使用Vant Weapp？</h2><h3 id="1-安装组件库"><a href="#1-安装组件库" class="headerlink" title="1.安装组件库"></a>1.安装组件库</h3><blockquote><p>以下两种安装方式没有区别，都是将组件库复制到static目录下。 </p></blockquote><h4 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> i @vant/weapp -S --production<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后，将 <code>node_modules/vant-weapp/dist</code> 目录下的所有文件，copy 至 <code>static/vant</code> 目录下。</p><h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>在任意非项目目录中，执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/youzan/vant-weapp.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>克隆到本地后，将 <code>dist</code> 目录下的所有文件复制到你项目的 <code>/static/vant/</code> 目录下。</p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><h4 id="2-1-引入组件"><a href="#2-1-引入组件" class="headerlink" title="2.1 引入组件"></a>2.1 引入组件</h4><h5 id="全局引入"><a href="#全局引入" class="headerlink" title="全局引入"></a>全局引入</h5><p>在<code>src\app.json</code>下如下示例引入。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"van-button"</span><span class="token operator">:</span> <span class="token string">"/static/vant/button/index"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="局部引入"><a href="#局部引入" class="headerlink" title="局部引入"></a>局部引入</h6><p>在需要引入组件的页面目录下的 <code>main.json</code> 文件中，引入对应组件，引入方式同上。</p><h4 id="2-2-修改-project-config-json"><a href="#2-2-修改-project-config-json" class="headerlink" title="2.2 修改 project.config.json"></a>2.2 修改 project.config.json</h4><p>需要手动在 <code>project.config.json</code> 内添加如下配置，使开发者工具可以正确索引到 npm 依赖的位置。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  ...  <span class="token property">"setting"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    ...    <span class="token property">"packNpmManually"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"packNpmRelationList"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"packageJsonPath"</span><span class="token operator">:</span> <span class="token string">"./package.json"</span><span class="token punctuation">,</span>        <span class="token property">"miniprogramNpmDistDir"</span><span class="token operator">:</span> <span class="token string">"./miniprogram/"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-组件使用"><a href="#2-3-组件使用" class="headerlink" title="2.3 组件使用"></a>2.3 组件使用</h4><p>直接在.vue页面中写相应标签即可。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>具体组件 api 文档参考<a href="https://vant-contrib.gitee.io/vant-weapp/#/home">Vant Weapp</a></p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>因mpvue和微信小程序的方式有所不同，所以写的时候也要看<a href="http://mpvue.com/">mpvue</a>的文档</p><h5 id="1-数据绑定"><a href="#1-数据绑定" class="headerlink" title="1.数据绑定"></a>1.数据绑定</h5><p>原生小程序使用方式为</p><h6 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h6><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;value&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mpvue 使用方式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="van-field-双向绑定"><a href="#van-field-双向绑定" class="headerlink" title="van-field 双向绑定"></a>van-field 双向绑定</h6><p>示例：绑定输入框完成注册功能</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>van-field</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>registerform.username<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>在此处填写<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>registerform.username=$event.mp.detail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>van-field</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>微信登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">&#123;</span>            registerform<span class="token operator">:</span><span class="token punctuation">&#123;</span>                username<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>                <span class="token operator">...</span>            <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token keyword">async</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">let</span><span class="token punctuation">&#123;</span>                username<span class="token punctuation">,</span>                <span class="token operator">...</span>            <span class="token punctuation">&#125;</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>                username<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">.</span>registerform<span class="token punctuation">.</span>username<span class="token punctuation">,</span>                <span class="token operator">...</span>            <span class="token punctuation">&#125;</span>                <span class="token operator">...</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-事件绑定"><a href="#2-事件绑定" class="headerlink" title="2.事件绑定"></a>2.事件绑定</h5><p>原生小程序使用方式</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">bind:click&#x3D;&quot;onClick&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mpvue 使用方式</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">@click&#x3D;&quot;onClick&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-获取-event-事件对象中值"><a href="#3-获取-event-事件对象中值" class="headerlink" title="3.获取 event 事件对象中值"></a>3.获取 event 事件对象中值</h5><p>值得注意的是，mpvue中获取event值与原生小程序有所不同。举例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">onChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 获取表单组件filed的值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>mp<span class="token punctuation">.</span>detail<span class="token punctuation">)</span> <span class="token comment">// 注意加入mp</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mpvue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mpvue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
